use flake

# Customize the name of connection
SNOWSQL_EXTRACT=$(cat ~/.snowsql/config | jc --ini | jq '."connections.canary"')

export SNOWSQL_ACCOUNT=$(echo $SNOWSQL_EXTRACT | jq -r '.accountname')
export SNOWSQL_ACCOUNT_URL="https://${SNOWSQL_ACCOUNT}.snowflakecomputing.com"
export SNOWSQL_USER=$(echo $SNOWSQL_EXTRACT | jq -r '.username')
export SNOWSQL_PWD=$(echo $SNOWSQL_EXTRACT | jq -r '.password')
export SNOWSQL_DATABASE=$(echo $SNOWSQL_EXTRACT | jq -r '.dbname')
export SNOWSQL_SCHEMA=$(echo $SNOWSQL_EXTRACT | jq -r '.schemaname')
export SNOWSQL_WAREHOUSE=$(echo $SNOWSQL_EXTRACT | jq -r '.warehousename')
export SNOWSQL_ROLE=$(echo $SNOWSQL_EXTRACT | jq -r '.rolename')

# SNOWFLAKE_ vars as available inside SPCS
export SNOWFLAKE_ACCOUNT=${SNOWSQL_ACCOUNT}
export SNOWFLAKE_USER=${SNOWSQL_USER}
export SNOWFLAKE_PASSWORD=${SNOWSQL_PWD}
export SNOWFLAKE_WAREHOUSE=${SNOWSQL_WAREHOUSE}
export SNOWFLAKE_DATABASE=${SNOWSQL_DATABASE}
export SNOWFLAKE_SCHEMA=${SNOWSQL_SCHEMA}

# Set manually
export SF_REPO_NAME="SPCS_REPO"
export SPEC_STAGE="SPCS_SPECS"

# Specific to this project, everything in same DB
export REGISTRY_PATH="${SNOWFLAKE_DATABASE,,}/${SNOWFLAKE_SCHEMA,,}/${SF_REPO_NAME,,}"
export REGISTRY_HOSTNAME="${SNOWFLAKE_ACCOUNT,,}.registry.snowflakecomputing.com"
export REGISTRY_URL="${REGISTRY_HOSTNAME}/${SNOWFLAKE_DATABASE,,}/${SNOWFLAKE_SCHEMA,,}/${SF_REPO_NAME,,}"

source_env_if_exists .envrc.local
